##########################
# Options: bitcoin v0.12.1
##########################

# Receive and display P2P network alerts (default: 0)
#alerts=0

# Execute command when a relevant alert is received or we see a really
# long fork (%s in cmd is replaced by message)
#alertnotify=<cmd>

# Execute command when the best block changes (%s in cmd is replaced by
# block hash)
#blocknotify=<cmd>

# Whether to operate in a blocks only mode (default: 0)
#blocksonly=0

# How many blocks to check at startup (default: 288, 0 = all)
#checkblocks=<n>

# How thorough the block verification of -checkblocks is (0-4, default: 3)
#checklevel=<n>

# Run in the background as a daemon and accept commands
#daemon=1

# Specify data directory
#datadir=~/.bitcoin

# Set database cache size in megabytes (4 to 16384, default: 100)
#dbcache=<n>

# Imports blocks from external blk000??.dat file on startup
#loadblock=<file>

# Keep at most <n> unconnectable transactions in memory (default: 100)
#maxorphantx=<n>

# Keep the transaction memory pool below <n> megabytes (default: 300)
#maxmempool=<n>

# Do not keep transactions in the mempool longer than <n> hours (default:
# 72)
#mempoolexpiry=<n>

# Set the number of script verification threads (-1 to 16, 0 = auto, <0 =
# leave that many cores free, default: 0)
#par=<n>

# Specify pid file (default: bitcoind.pid)
#pid=<file>

# Reduce storage requirements by pruning (deleting) old blocks. This mode
# is incompatible with -txindex and -rescan. Warning: Reverting this
# setting requires re-downloading the entire blockchain. (default: 0 =
# disable pruning blocks, >550 = target size in MiB to use for block
# files)
#prune=<n>

# Rebuild block chain index from current blk000??.dat files on startup
#reindex

# Create new files with system default permissions, instead of umask 077
# (only effective with disabled wallet functionality)
#sysperms

# Maintain a full transaction index, used by the getrawtransaction rpc
# call (default: 0)
#txindex=0

####################
# Connection options:
####################

# Add a node to connect to and attempt to keep the connection open
#addnode=<ip>

# Threshold for disconnecting misbehaving peers (default: 100)
#banscore=<n>

# Number of seconds to keep misbehaving peers from reconnecting (default:
# 86400)
#bantime=<n>

# Bind to given address and always listen on it. Use [host]:port notation
# for IPv6
#bind=<addr>

# Connect only to the specified node(s)
#connect=<ip>

# Discover own IP addresses (default: 1 when listening and no -externalip
# or -proxy)
#discover=1

# Allow DNS lookups for -addnode, -seednode and -connect (default: 1)
#dns=1

# Query for peer addresses via DNS lookup, if low on addresses (default: 1
# unless -connect)
#dnsseed

# Specify your own public address
#externalip=<ip>

# Always query for peer addresses via DNS lookup (default: 0)
#forcednsseed=0

# Accept connections from outside (default: 1 if no -proxy or -connect)
#listen=1

# Automatically create Tor hidden service (default: 1)
#listenonion=1

# Maintain at most <n> connections to peers (default: 125)
#maxconnections=<n>

# Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)
#maxreceivebuffer=<n>

# Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)
#maxsendbuffer=<n>

# Use separate SOCKS5 proxy to reach peers via Tor hidden services
# (default: -proxy)
#onion=<ip:port>

# Only connect to nodes in network <net> (ipv4, ipv6 or onion)
#onlynet=<net>

# Relay non-P2SH multisig (default: 1)
#permitbaremultisig=1

# Support filtering of blocks and transaction with bloom filters (default:
# 1)
#peerbloomfilters=1

# Enforce minimum protocol version to limit use of bloom filters (default:
# 0)
#enforcenodebloom=0

# Listen for connections on <port> (default: 8222 or testnet: 18222)
#port=<port>

# Connect through SOCKS5 proxy
#proxy=<ip:port>

# Randomize credentials for every proxy connection. This enables Tor
# stream isolation (default: 1)
#proxyrandomize=1

# Connect to a node to retrieve peer addresses, and disconnect
#seednode=<ip>

# Specify connection timeout in milliseconds (minimum: 1, default: 5000)
#timeout=<n>

# Tor control port to use if onion listening enabled (default:
# 127.0.0.1:9051)
#torcontrol=<ip>:<port>

# Tor control port password (default: empty)
#torpassword=<pass>

# Bind to given address and whitelist peers connecting to it. Use
# [host]:port notation for IPv6
#whitebind=<addr>

# Whitelist peers connecting from the given netmask or IP address. Can be
# specified multiple times. Whitelisted peers cannot be DoS banned and
# their transactions are always relayed, even if they are already in the
# mempool, useful e.g. for a gateway
#whitelist=<netmask>

# Accept relayed transactions received from whitelisted peers even when
# not relaying transactions (default: 1)
#whitelistrelay=1

# Force relay of transactions from whitelisted peers even they violate
# local relay policy (default: 1)
#whitelistforcerelay=1

# Tries to keep outbound traffic under the given target (in MiB per 24h),
# 0 = no limit (default: 0)
#maxuploadtarget=<n>

#################
# Wallet options:
#################

# Do not load the wallet and disable wallet RPC calls
#disablewallet

# Set key pool size to <n> (default: 100)
#keypool=100

# A fee rate (in BTC/kB) that will be used when fee estimation has
# insufficient data (default: 0.0002)
#fallbackfee=<amt>

# Fees (in BTC/kB) smaller than this are considered zero fee for
# transaction creation (default: 0.00001)
#mintxfee=<amt>

# Fee (in BTC/kB) to add to transactions you send (default: 0.00)
#paytxfee=<amt>

# Rescan the block chain for missing wallet transactions on startup
#rescan

# Attempt to recover private keys from a corrupt wallet.dat on startup
#salvagewallet

# Send transactions as zero-fee transactions if possible (default: 0)
#sendfreetransactions=0

# Spend unconfirmed change when sending transactions (default: 1)
#spendzeroconfchange=1

# If paytxfee is not set, include enough fee so transactions begin
# confirmation on average within n blocks (default: 2)
#txconfirmtarget=<n>

# Maximum total fees (in BTC) to use in a single wallet transaction;
# setting this too low may abort large transactions (default: 0.10)
#maxtxfee=<amt>

# Upgrade wallet to latest format on startup
#upgradewallet

# Specify wallet file (within data directory) (default: wallet.dat)
#wallet=<file>

# Make the wallet broadcast transactions (default: 1)
#walletbroadcast=1

# Execute command when a wallet transaction changes (%s in cmd is replaced
# by TxID)
#walletnotify=<cmd>

# Delete all wallet transactions and only recover those parts of the
# blockchain through -rescan on startup (1 = keep tx meta data e.g.
# account owner and payment request information, 2 = drop tx meta data)
#zapwallettxes=<mode>

############################
# Debugging/Testing options:
############################

# Append comment to the user agent string
#uacomment=<cmt>

# Do a full consistency check for mapBlockIndex, setBlockIndexCandidates,
# chainActive and mapBlocksUnlinked occasionally. Also sets -checkmempool
# (default: 0)
#checkblockindex=0

# Run checks every <n> transactions (default: 0)
#checkmempool=<n>

# Disable expensive verification for known chain history (default: 1)
#checkpoints=1

# Flush wallet database activity from memory to disk log every <n>
# megabytes (default: 100)
#dblogsize=<n>

# Disable safemode, override a real safe mode event (default: 0)
#disablesafemode=0

# Force safe mode (default: 0)
#testsafemode=0

# Randomly drop 1 of every <n> network messages
#dropmessagestest=<n>

# Randomly fuzz 1 of every <n> network messages
#fuzzmessagestest=<n>

# Run a thread to flush wallet periodically (default: 1)
#flushwallet=1

# Stop running after importing blocks from disk (default: 0)
#stopafterblockimport=0

# Do not accept transactions if number of in-mempool ancestors is <n> or
# more (default: 25)
#limitancestorcount=<n>

# Do not accept transactions whose size with all in-mempool ancestors
# exceeds <n> kilobytes (default: 101)
#limitancestorsize=<n>

# Do not accept transactions if any ancestor would have <n> or more
# in-mempool descendants (default: 25)
#limitdescendantcount=<n>

# Do not accept transactions if any ancestor would have more than <n>
# kilobytes of in-mempool descendants (default: 101).
#limitdescendantsize=<n>

# Output debugging information (default: 0, supplying <category> is
# optional). If <category> is not supplied or if <category> = 1, output
# all debugging information.<category> can be: addrman, alert, bench,
# coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net,
# proxy, prune, http, libevent, tor, zmq.
#debug=<category>

# Turn off debugging messages, same as -debug=0
#nodebug=1

# Generate coins (default: 0)
gen=1

# Set the number of threads for coin generation if enabled (-1 = all
# cores, default: 1)
#genproclimit=1

# Include IP addresses in debug output (default: 0)
logips=1

# Prepend debug output with timestamp (default: 1)
#logtimestamps=1

# Add microsecond precision to debug timestamps (default: 0)
logtimemicros=1

# Replace actual time with <n> seconds since epoch (default: 0)
#mocktime=<n>

# Continuously rate-limit free transactions to <n>*1000 bytes per minute
# (default: 15)
#limitfreerelay=<n>

# Require high priority for relaying free or low-fee transactions
# (default: 1)
#relaypriority=1

# Limit size of signature cache to <n> MiB (default: 40)
#maxsigcachesize=<n>

# Fees (in BTC/kB) smaller than this are considered zero fee for relaying,
# mining and transaction creation (default: 0.00001)
#minrelaytxfee=0.00001

# Send trace/debug info to console instead of debug.log file
printtoconsole=1

# Log transaction priority and fee per kB when mining blocks (default: 0)
printpriority=1

# Sets the DB_PRIVATE flag in the wallet db environment (default: 1)
#privdb=1

# Shrink debug.log file on client startup (default: 1 when no -debug)
#shrinkdebugfile=1

##########################
# Chain selection options:
##########################

# Use the test chain
#testnet=1

# Enter regression test mode, which uses a special chain in which blocks
# can be solved instantly. This is intended for regression testing tools
# and app development.
#regtest=1

#####################
# Node relay options:
#####################

# Relay and mine "non-standard" transactions (testnet/regtest only;
# default: 1)
#acceptnonstdtxn=1

# Minimum bytes per sigop in transactions we relay and mine (default: 20)
#bytespersigop=20

# Relay and mine data carrier transactions (default: 1)
#datacarrier=1

# Maximum size of data in data carrier transactions we relay and mine
# (default: 83)
#datacarriersize=83

# Enable transaction replacement in the memory pool (default: 1)
#mempoolreplacement=1

#########################
# Block creation options:
#########################

# Set minimum block size in bytes (default: 0)
#blockminsize=0

# Set maximum block size in bytes (default: 750000)
#blockmaxsize=750000

# Set maximum size of high-priority/low-fee transactions in bytes
# (default: 0)
#blockprioritysize=0

# Override block version to test forking scenarios
#blockversion=<n>

#####################
# RPC server options:
#####################

# Accept command line and JSON-RPC commands
#server=1

# Accept public REST requests (default: 0)
#rest=0

# Bind to given address to listen for JSON-RPC connections. Use
# [host]:port notation for IPv6. This option can be specified multiple
# times (default: bind to all interfaces)
#rpcbind=<addr>

# Location of the auth cookie (default: data dir)
#rpccookiefile=<loc>

# Username for JSON-RPC connections
#rpcuser=<user>

# Password for JSON-RPC connections
#rpcpassword=<pw>

# Username and hashed password for JSON-RPC connections. The field
# <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical
# python script is included in share/rpcuser. This option can be specified
# multiple times
#rpcauth=<userpw>

# Listen for JSON-RPC connections on <port> (default: 8221 or testnet:
# 18221)
#rpcport=<port>

# Allow JSON-RPC connections from specified source. Valid for <ip> are a
# single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0)
# or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified
# multiple times
#rpcallowip=<ip>

# Set the number of threads to service RPC calls (default: 4)
#rpcthreads=4

# Set the depth of the work queue to service RPC calls (default: 16)
#rpcworkqueue=<n>

# Timeout during HTTP requests (default: 30)
#rpcservertimeout=30
